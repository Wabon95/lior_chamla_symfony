{% extends 'base.html.twig' %}

{% block title %}Réserver l'annonce : {{ ad.title }}{% endblock %}

{% block stylesheets %}
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.min.css"/>
{% endblock %}

{% block body %}
    <div class="container">
        <h1>Réserver pour l'annonce : {{ ad.title }}</h1>
        <p>Vous êtes sur le point de réserver le bien de <strong>{{ ad.author.fullName }}</strong></p>
        {{ form_start(form) }}
        <div class="alert alert-light">
            <h2>Commencez par nous dire les dates qui vous intéressent !</h2>
            <div class="row">
                <div class="col">
                    {{ form_row(form.startDate) }}
                </div>
                <div class="col">
                    {{ form_row(form.endDate) }}
                </div>
            </div>
            <h4>Montant du séjour : <span id="amount" class="font-weight-bold">...</span> €</h4>
            <span id="days">0</span> nuit(s) à {{ ad.price }} € / nuit
            {{ form_row(form.comment) }}
            {{ form_end(form) }}
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js"></script>
    <script>
        $(document).ready(function(){ 
            $('#booking_startDate, #booking_endDate').datepicker({
                format: 'dd/mm/yyyy',
                datesDisabled: [
                    {% for day in ad.notAvailableDays %}
                        "{{ day.format('d/m/Y') }}",
                    {% endfor %}
                ],
                startDate: new Date()
            });
            
            $('#booking_startDate, #booking_endDate').on('change', calculateAmount);
        });

        function calculateAmount() {
            const endDate = new Date($('#booking_endDate').val().replace(/(\d+)\/(\d+)\/(\d{4})/, '$3-$2-$1'));
            const startDate = new Date($('#booking_startDate').val().replace(/(\d+)\/(\d+)\/(\d{4})/, '$3-$2-$1'));

            // Expression régulière .replace(/(\d+)\/(\d+)\/(\d{4})/, '$3-$2-$1')
            // \d+ = un chiffre, \d{4} = 4 chiffres, \/ = un /, parenthèse pour pouvoir récupérer les valeur après ($3, $2, $1)
            // En JS on place une regex entre deux //
            if (startDate && endDate && startDate < endDate) {
                const DAY_TIME = 24*60*60*1000; // On défini une journée en milliseconde (On créer soi même le timestamp d'une journée)
                const interval = endDate.getTime() - startDate.getTime(); // en JS getTime() permet d'obtenir un timestamp à partir d'un objet DateTime
                const days = interval / DAY_TIME;
                const amount = days * {{ ad.price }};

                $('#days').text(days);
                $('#amount').text(amount.toLocaleString('fr-FR'));
            }
        }
    </script>
{% endblock %}
